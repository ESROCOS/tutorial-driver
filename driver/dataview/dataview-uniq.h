#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1001  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1002  /*(0 .. 4294967295)*/
#endif

typedef struct {
    asn1SccT_UInt32 time_step;
} asn1SccInvalidTimeStep;

#define asn1SccInvalidTimeStep_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccInvalidTimeStep_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccInvalidTimeStep_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccInvalidTimeStep_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccInvalidTimeStep_REQUIRED_BYTES_FOR_XER_ENCODING   78

void asn1SccInvalidTimeStep_Initialize(asn1SccInvalidTimeStep* pVal);
flag asn1SccInvalidTimeStep_IsConstraintValid(const asn1SccInvalidTimeStep* val, int* pErrCode);


typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1003  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1004  /*(0 .. 255)*/
#endif

typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


typedef enum {
    asn1Sccseconds = 0,
    asn1Sccmilliseconds = 1,
    asn1Sccmicroseconds = 2
} asn1SccResolution;

#define asn1SccResolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccResolution_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccResolution_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccResolution_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccResolution_REQUIRED_BYTES_FOR_XER_ENCODING   42

void asn1SccResolution_Initialize(asn1SccResolution* pVal);
flag asn1SccResolution_IsConstraintValid(const asn1SccResolution* val, int* pErrCode);
#ifndef ERR_asn1SccResolution_unknown_enumeration_value 
#define ERR_asn1SccResolution_unknown_enumeration_value		1006  /**/
#endif
#ifndef ERR_asn1SccResolution 
#define ERR_asn1SccResolution		1005  /**/
#endif

typedef double asn1SccT_Double;

#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccT_Double_REQUIRED_BYTES_FOR_XER_ENCODING   71

void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* val, int* pErrCode);
#ifndef ERR_asn1SccT_Double 
#define ERR_asn1SccT_Double		1007  /*(-1.79769313486231570000E+308 .. 1.79769313486231570000E+308)*/
#endif

typedef struct {
    asn1SccT_Double kelvin;
} asn1SccTemperature;

#define asn1SccTemperature_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccTemperature_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccTemperature_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccTemperature_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccTemperature_REQUIRED_BYTES_FOR_XER_ENCODING   94

void asn1SccTemperature_Initialize(asn1SccTemperature* pVal);
flag asn1SccTemperature_IsConstraintValid(const asn1SccTemperature* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccVector6d;

#define asn1SccVector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccVector6d_REQUIRED_BITS_FOR_ENCODING        627
#define asn1SccVector6d_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define asn1SccVector6d_REQUIRED_BITS_FOR_ACN_ENCODING    627
#define asn1SccVector6d_REQUIRED_BYTES_FOR_XER_ENCODING   447

void asn1SccVector6d_Initialize(asn1SccVector6d* pVal);
flag asn1SccVector6d_IsConstraintValid(const asn1SccVector6d* val, int* pErrCode);
#ifndef ERR_asn1SccVector6d 
#define ERR_asn1SccVector6d		1008  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccVector3d;

#define asn1SccVector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccVector3d_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccVector3d_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccVector3d_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccVector3d_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccVector3d_Initialize(asn1SccVector3d* pVal);
flag asn1SccVector3d_IsConstraintValid(const asn1SccVector3d* val, int* pErrCode);
#ifndef ERR_asn1SccVector3d 
#define ERR_asn1SccVector3d		1009  /*(SIZE(1 .. 3))*/
#endif

typedef asn1SccVector3d asn1SccPosition;

#define asn1SccPosition_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccPosition_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccPosition_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccPosition_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccPosition_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccPosition_Initialize(asn1SccPosition* pVal);
flag asn1SccPosition_IsConstraintValid(const asn1SccPosition* val, int* pErrCode);


typedef struct {
    asn1SccVector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;
} asn1SccWaypoint;

#define asn1SccWaypoint_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccWaypoint_REQUIRED_BITS_FOR_ENCODING        626
#define asn1SccWaypoint_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define asn1SccWaypoint_REQUIRED_BITS_FOR_ACN_ENCODING    626
#define asn1SccWaypoint_REQUIRED_BYTES_FOR_XER_ENCODING   480

void asn1SccWaypoint_Initialize(asn1SccWaypoint* pVal);
flag asn1SccWaypoint_IsConstraintValid(const asn1SccWaypoint* val, int* pErrCode);


typedef asn1SccVector3d asn1SccPoint;

#define asn1SccPoint_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccPoint_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccPoint_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccPoint_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccPoint_REQUIRED_BYTES_FOR_XER_ENCODING   228

void asn1SccPoint_Initialize(asn1SccPoint* pVal);
flag asn1SccPoint_IsConstraintValid(const asn1SccPoint* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccPoint arr[50];
} asn1SccTrajectory_points;

#define asn1SccTrajectory_points_REQUIRED_BYTES_FOR_ENCODING       1964 
#define asn1SccTrajectory_points_REQUIRED_BITS_FOR_ENCODING        15706
#define asn1SccTrajectory_points_REQUIRED_BYTES_FOR_ACN_ENCODING   1964 
#define asn1SccTrajectory_points_REQUIRED_BITS_FOR_ACN_ENCODING    15706
#define asn1SccTrajectory_points_REQUIRED_BYTES_FOR_XER_ENCODING   11439

void asn1SccTrajectory_points_Initialize(asn1SccTrajectory_points* pVal);
flag asn1SccTrajectory_points_IsConstraintValid(const asn1SccTrajectory_points* val, int* pErrCode);
#ifndef ERR_asn1SccTrajectory_points 
#define ERR_asn1SccTrajectory_points		1010  /*(SIZE(1 .. maxTrajectoryPoints))*/
#endif

typedef struct {
    asn1SccT_Double speed;
    asn1SccTrajectory_points points;
} asn1SccTrajectory;

#define asn1SccTrajectory_REQUIRED_BYTES_FOR_ENCODING       1977 
#define asn1SccTrajectory_REQUIRED_BITS_FOR_ENCODING        15810
#define asn1SccTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING   1977 
#define asn1SccTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING    15810
#define asn1SccTrajectory_REQUIRED_BYTES_FOR_XER_ENCODING   11507

void asn1SccTrajectory_Initialize(asn1SccTrajectory* pVal);
flag asn1SccTrajectory_IsConstraintValid(const asn1SccTrajectory* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccQuaterniond;

#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccQuaterniond_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccQuaterniond_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_XER_ENCODING   311

void asn1SccQuaterniond_Initialize(asn1SccQuaterniond* pVal);
flag asn1SccQuaterniond_IsConstraintValid(const asn1SccQuaterniond* val, int* pErrCode);
#ifndef ERR_asn1SccQuaterniond 
#define ERR_asn1SccQuaterniond		1011  /*(SIZE(1 .. 4))*/
#endif

typedef asn1SccQuaterniond asn1SccOrientation;

#define asn1SccOrientation_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccOrientation_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccOrientation_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccOrientation_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccOrientation_REQUIRED_BYTES_FOR_XER_ENCODING   311

void asn1SccOrientation_Initialize(asn1SccOrientation* pVal);
flag asn1SccOrientation_IsConstraintValid(const asn1SccOrientation* val, int* pErrCode);


typedef struct {
    asn1SccPosition pos;
    asn1SccOrientation orient;
} asn1SccPose;

#define asn1SccPose_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccPose_REQUIRED_BITS_FOR_ENCODING        732
#define asn1SccPose_REQUIRED_BYTES_FOR_ACN_ENCODING   92 
#define asn1SccPose_REQUIRED_BITS_FOR_ACN_ENCODING    732
#define asn1SccPose_REQUIRED_BYTES_FOR_XER_ENCODING   538

void asn1SccPose_Initialize(asn1SccPose* pVal);
flag asn1SccPose_IsConstraintValid(const asn1SccPose* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[100];
} asn1SccVectorXd;

#define asn1SccVectorXd_REQUIRED_BYTES_FOR_ENCODING       1301 
#define asn1SccVectorXd_REQUIRED_BITS_FOR_ENCODING        10407
#define asn1SccVectorXd_REQUIRED_BYTES_FOR_ACN_ENCODING   1301 
#define asn1SccVectorXd_REQUIRED_BITS_FOR_ACN_ENCODING    10407
#define asn1SccVectorXd_REQUIRED_BYTES_FOR_XER_ENCODING   7121

void asn1SccVectorXd_Initialize(asn1SccVectorXd* pVal);
flag asn1SccVectorXd_IsConstraintValid(const asn1SccVectorXd* val, int* pErrCode);
#ifndef ERR_asn1SccVectorXd 
#define ERR_asn1SccVectorXd		1012  /*(SIZE(1 .. 100))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[2];
} asn1SccVector2d;

#define asn1SccVector2d_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccVector2d_REQUIRED_BITS_FOR_ENCODING        209
#define asn1SccVector2d_REQUIRED_BYTES_FOR_ACN_ENCODING   27 
#define asn1SccVector2d_REQUIRED_BITS_FOR_ACN_ENCODING    209
#define asn1SccVector2d_REQUIRED_BYTES_FOR_XER_ENCODING   163

void asn1SccVector2d_Initialize(asn1SccVector2d* pVal);
flag asn1SccVector2d_IsConstraintValid(const asn1SccVector2d* val, int* pErrCode);
#ifndef ERR_asn1SccVector2d 
#define ERR_asn1SccVector2d		1013  /*(SIZE(1 .. 2))*/
#endif

typedef asn1SccVector2d asn1SccPosition2D;

#define asn1SccPosition2D_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccPosition2D_REQUIRED_BITS_FOR_ENCODING        209
#define asn1SccPosition2D_REQUIRED_BYTES_FOR_ACN_ENCODING   27 
#define asn1SccPosition2D_REQUIRED_BITS_FOR_ACN_ENCODING    209
#define asn1SccPosition2D_REQUIRED_BYTES_FOR_XER_ENCODING   167

void asn1SccPosition2D_Initialize(asn1SccPosition2D* pVal);
flag asn1SccPosition2D_IsConstraintValid(const asn1SccPosition2D* val, int* pErrCode);


typedef struct {
    asn1SccPosition2D position;
    asn1SccT_Double orientation;
} asn1SccPose2D;

#define asn1SccPose2D_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccPose2D_REQUIRED_BITS_FOR_ENCODING        313
#define asn1SccPose2D_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccPose2D_REQUIRED_BITS_FOR_ACN_ENCODING    313
#define asn1SccPose2D_REQUIRED_BYTES_FOR_XER_ENCODING   257

void asn1SccPose2D_Initialize(asn1SccPose2D* pVal);
flag asn1SccPose2D_IsConstraintValid(const asn1SccPose2D* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccVector4d;

#define asn1SccVector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccVector4d_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccVector4d_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccVector4d_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccVector4d_REQUIRED_BYTES_FOR_XER_ENCODING   305

void asn1SccVector4d_Initialize(asn1SccVector4d* pVal);
flag asn1SccVector4d_IsConstraintValid(const asn1SccVector4d* val, int* pErrCode);
#ifndef ERR_asn1SccVector4d 
#define ERR_asn1SccVector4d		1014  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccAngleAxisd;

#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccAngleAxisd_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccAngleAxisd_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_XER_ENCODING   309

void asn1SccAngleAxisd_Initialize(asn1SccAngleAxisd* pVal);
flag asn1SccAngleAxisd_IsConstraintValid(const asn1SccAngleAxisd* val, int* pErrCode);
#ifndef ERR_asn1SccAngleAxisd 
#define ERR_asn1SccAngleAxisd		1015  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccTransform3d_elm;

#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccTransform3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccTransform3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   319

void asn1SccTransform3d_elm_Initialize(asn1SccTransform3d_elm* pVal);
flag asn1SccTransform3d_elm_IsConstraintValid(const asn1SccTransform3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccTransform3d_elm 
#define ERR_asn1SccTransform3d_elm		1016  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccTransform3d_elm arr[4];
} asn1SccTransform3d;

#define asn1SccTransform3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccTransform3d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccTransform3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccTransform3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccTransform3d_REQUIRED_BYTES_FOR_XER_ENCODING   1271

void asn1SccTransform3d_Initialize(asn1SccTransform3d* pVal);
flag asn1SccTransform3d_IsConstraintValid(const asn1SccTransform3d* val, int* pErrCode);
#ifndef ERR_asn1SccTransform3d 
#define ERR_asn1SccTransform3d		1017  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccMatrix4d_elm;

#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccMatrix4d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccMatrix4d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void asn1SccMatrix4d_elm_Initialize(asn1SccMatrix4d_elm* pVal);
flag asn1SccMatrix4d_elm_IsConstraintValid(const asn1SccMatrix4d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix4d_elm 
#define ERR_asn1SccMatrix4d_elm		1018  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix4d_elm arr[4];
} asn1SccMatrix4d;

#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccMatrix4d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccMatrix4d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void asn1SccMatrix4d_Initialize(asn1SccMatrix4d* pVal);
flag asn1SccMatrix4d_IsConstraintValid(const asn1SccMatrix4d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix4d 
#define ERR_asn1SccMatrix4d		1019  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[2];
} asn1SccMatrix2d_elm;

#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccMatrix2d_elm_REQUIRED_BITS_FOR_ENCODING        209
#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   27 
#define asn1SccMatrix2d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    209
#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   171

void asn1SccMatrix2d_elm_Initialize(asn1SccMatrix2d_elm* pVal);
flag asn1SccMatrix2d_elm_IsConstraintValid(const asn1SccMatrix2d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix2d_elm 
#define ERR_asn1SccMatrix2d_elm		1020  /*(SIZE(1 .. 2))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix2d_elm arr[2];
} asn1SccMatrix2d;

#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccMatrix2d_REQUIRED_BITS_FOR_ENCODING        419
#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccMatrix2d_REQUIRED_BITS_FOR_ACN_ENCODING    419
#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_XER_ENCODING   359

void asn1SccMatrix2d_Initialize(asn1SccMatrix2d* pVal);
flag asn1SccMatrix2d_IsConstraintValid(const asn1SccMatrix2d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix2d 
#define ERR_asn1SccMatrix2d		1021  /*(SIZE(1 .. 2))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccIsometry3d_elm;

#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccIsometry3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccIsometry3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   317

void asn1SccIsometry3d_elm_Initialize(asn1SccIsometry3d_elm* pVal);
flag asn1SccIsometry3d_elm_IsConstraintValid(const asn1SccIsometry3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccIsometry3d_elm 
#define ERR_asn1SccIsometry3d_elm		1022  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccIsometry3d_elm arr[4];
} asn1SccIsometry3d;

#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccIsometry3d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccIsometry3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_XER_ENCODING   1269

void asn1SccIsometry3d_Initialize(asn1SccIsometry3d* pVal);
flag asn1SccIsometry3d_IsConstraintValid(const asn1SccIsometry3d* val, int* pErrCode);
#ifndef ERR_asn1SccIsometry3d 
#define ERR_asn1SccIsometry3d		1023  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[20];
} asn1SccMatrixXd_elm;

#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_ENCODING       261 
#define asn1SccMatrixXd_elm_REQUIRED_BITS_FOR_ENCODING        2085
#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   261 
#define asn1SccMatrixXd_elm_REQUIRED_BITS_FOR_ACN_ENCODING    2085
#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_XER_ENCODING   1449

void asn1SccMatrixXd_elm_Initialize(asn1SccMatrixXd_elm* pVal);
flag asn1SccMatrixXd_elm_IsConstraintValid(const asn1SccMatrixXd_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrixXd_elm 
#define ERR_asn1SccMatrixXd_elm		1024  /*(SIZE(1 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrixXd_elm arr[20];
} asn1SccMatrixXd;

#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_ENCODING       5214 
#define asn1SccMatrixXd_REQUIRED_BITS_FOR_ENCODING        41705
#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_ACN_ENCODING   5214 
#define asn1SccMatrixXd_REQUIRED_BITS_FOR_ACN_ENCODING    41705
#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_XER_ENCODING   28961

void asn1SccMatrixXd_Initialize(asn1SccMatrixXd* pVal);
flag asn1SccMatrixXd_IsConstraintValid(const asn1SccMatrixXd* val, int* pErrCode);
#ifndef ERR_asn1SccMatrixXd 
#define ERR_asn1SccMatrixXd		1025  /*(SIZE(1 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccMatrix3d_elm;

#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccMatrix3d_elm_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccMatrix3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   242

void asn1SccMatrix3d_elm_Initialize(asn1SccMatrix3d_elm* pVal);
flag asn1SccMatrix3d_elm_IsConstraintValid(const asn1SccMatrix3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix3d_elm 
#define ERR_asn1SccMatrix3d_elm		1026  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix3d_elm arr[3];
} asn1SccMatrix3d;

#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define asn1SccMatrix3d_REQUIRED_BITS_FOR_ENCODING        944
#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_ACN_ENCODING   118 
#define asn1SccMatrix3d_REQUIRED_BITS_FOR_ACN_ENCODING    944
#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_XER_ENCODING   741

void asn1SccMatrix3d_Initialize(asn1SccMatrix3d* pVal);
flag asn1SccMatrix3d_IsConstraintValid(const asn1SccMatrix3d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix3d 
#define ERR_asn1SccMatrix3d		1027  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccMatrix6d_elm;

#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccMatrix6d_elm_REQUIRED_BITS_FOR_ENCODING        627
#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define asn1SccMatrix6d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    627
#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   455

void asn1SccMatrix6d_elm_Initialize(asn1SccMatrix6d_elm* pVal);
flag asn1SccMatrix6d_elm_IsConstraintValid(const asn1SccMatrix6d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix6d_elm 
#define ERR_asn1SccMatrix6d_elm		1028  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrix6d_elm arr[6];
} asn1SccMatrix6d;

#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_ENCODING       471 
#define asn1SccMatrix6d_REQUIRED_BITS_FOR_ENCODING        3765
#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_ACN_ENCODING   471 
#define asn1SccMatrix6d_REQUIRED_BITS_FOR_ACN_ENCODING    3765
#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_XER_ENCODING   2739

void asn1SccMatrix6d_Initialize(asn1SccMatrix6d* pVal);
flag asn1SccMatrix6d_IsConstraintValid(const asn1SccMatrix6d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix6d 
#define ERR_asn1SccMatrix6d		1029  /*(SIZE(1 .. 6))*/
#endif

typedef asn1SccMatrix6d asn1SccCovariance;

#define asn1SccCovariance_REQUIRED_BYTES_FOR_ENCODING       471 
#define asn1SccCovariance_REQUIRED_BITS_FOR_ENCODING        3765
#define asn1SccCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   471 
#define asn1SccCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    3765
#define asn1SccCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   2743

void asn1SccCovariance_Initialize(asn1SccCovariance* pVal);
flag asn1SccCovariance_IsConstraintValid(const asn1SccCovariance* val, int* pErrCode);


typedef struct {
    asn1SccPosition translation;
    asn1SccQuaterniond orientation;
    asn1SccCovariance cov;
} asn1SccTransformWithCovariance;

#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       563 
#define asn1SccTransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        4497
#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   563 
#define asn1SccTransformWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    4497
#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   3331

void asn1SccTransformWithCovariance_Initialize(asn1SccTransformWithCovariance* pVal);
flag asn1SccTransformWithCovariance_IsConstraintValid(const asn1SccTransformWithCovariance* val, int* pErrCode);


typedef struct {
    asn1SccVector3d vel;
    asn1SccVector3d rot;
    asn1SccCovariance cov;
} asn1SccTwistWithCovariance;

#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       550 
#define asn1SccTwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4393
#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   550 
#define asn1SccTwistWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    4393
#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   3220

void asn1SccTwistWithCovariance_Initialize(asn1SccTwistWithCovariance* pVal);
flag asn1SccTwistWithCovariance_IsConstraintValid(const asn1SccTwistWithCovariance* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccAffine3d_elm;

#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccAffine3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define asn1SccAffine3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void asn1SccAffine3d_elm_Initialize(asn1SccAffine3d_elm* pVal);
flag asn1SccAffine3d_elm_IsConstraintValid(const asn1SccAffine3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccAffine3d_elm 
#define ERR_asn1SccAffine3d_elm		1030  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccAffine3d_elm arr[4];
} asn1SccAffine3d;

#define asn1SccAffine3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define asn1SccAffine3d_REQUIRED_BITS_FOR_ENCODING        1674
#define asn1SccAffine3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define asn1SccAffine3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define asn1SccAffine3d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void asn1SccAffine3d_Initialize(asn1SccAffine3d* pVal);
flag asn1SccAffine3d_IsConstraintValid(const asn1SccAffine3d* val, int* pErrCode);
#ifndef ERR_asn1SccAffine3d 
#define ERR_asn1SccAffine3d		1031  /*(SIZE(1 .. 4))*/
#endif

typedef struct {
    asn1SccT_Double distance;
    asn1SccT_Double angle;
} asn1SccPoseUpdateThreshold;

#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccPoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccPoseUpdateThreshold_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_XER_ENCODING   179

void asn1SccPoseUpdateThreshold_Initialize(asn1SccPoseUpdateThreshold* pVal);
flag asn1SccPoseUpdateThreshold_IsConstraintValid(const asn1SccPoseUpdateThreshold* val, int* pErrCode);


typedef struct {
    asn1SccT_Double rad;
} asn1SccAngle;

#define asn1SccAngle_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccAngle_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccAngle_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccAngle_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccAngle_REQUIRED_BYTES_FOR_XER_ENCODING   76

void asn1SccAngle_Initialize(asn1SccAngle* pVal);
flag asn1SccAngle_IsConstraintValid(const asn1SccAngle* val, int* pErrCode);


typedef struct {
    asn1SccT_Double startRad;
    asn1SccT_Double width;
} asn1SccAngleSegment;

#define asn1SccAngleSegment_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccAngleSegment_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccAngleSegment_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccAngleSegment_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccAngleSegment_REQUIRED_BYTES_FOR_XER_ENCODING   165

void asn1SccAngleSegment_Initialize(asn1SccAngleSegment* pVal);
flag asn1SccAngleSegment_IsConstraintValid(const asn1SccAngleSegment* val, int* pErrCode);


typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
} asn1SccMotion2D;

#define asn1SccMotion2D_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccMotion2D_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccMotion2D_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccMotion2D_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccMotion2D_REQUIRED_BYTES_FOR_XER_ENCODING   169

void asn1SccMotion2D_Initialize(asn1SccMotion2D* pVal);
flag asn1SccMotion2D_IsConstraintValid(const asn1SccMotion2D* val, int* pErrCode);


typedef double asn1SccT_Float;

#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccT_Float_REQUIRED_BYTES_FOR_XER_ENCODING   69

void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* val, int* pErrCode);
#ifndef ERR_asn1SccT_Float 
#define ERR_asn1SccT_Float		1032  /*(-3.40282346600000020000E+038 .. 3.40282346600000020000E+038)*/
#endif

typedef struct {
    asn1SccT_Double position;
    asn1SccT_Float speed;
    asn1SccT_Float effort;
    asn1SccT_Float raw;
    asn1SccT_Float acceleration;
} asn1SccJointState;

#define asn1SccJointState_REQUIRED_BYTES_FOR_ENCODING       65 
#define asn1SccJointState_REQUIRED_BITS_FOR_ENCODING        520
#define asn1SccJointState_REQUIRED_BYTES_FOR_ACN_ENCODING   65 
#define asn1SccJointState_REQUIRED_BITS_FOR_ACN_ENCODING    520
#define asn1SccJointState_REQUIRED_BYTES_FOR_XER_ENCODING   368

void asn1SccJointState_Initialize(asn1SccJointState* pVal);
flag asn1SccJointState_IsConstraintValid(const asn1SccJointState* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccJointState arr[60];
} asn1SccJointTrajectory;

#define asn1SccJointTrajectory_REQUIRED_BYTES_FOR_ENCODING       3901 
#define asn1SccJointTrajectory_REQUIRED_BITS_FOR_ENCODING        31206
#define asn1SccJointTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING   3901 
#define asn1SccJointTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING    31206
#define asn1SccJointTrajectory_REQUIRED_BYTES_FOR_XER_ENCODING   22115

void asn1SccJointTrajectory_Initialize(asn1SccJointTrajectory* pVal);
flag asn1SccJointTrajectory_IsConstraintValid(const asn1SccJointTrajectory* val, int* pErrCode);
#ifndef ERR_asn1SccJointTrajectory 
#define ERR_asn1SccJointTrajectory		1033  /*(SIZE(1 .. maxJointTrajectorySize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccJointTrajectory arr[60];
} asn1SccJointsTrajectory_trajectory;

#define asn1SccJointsTrajectory_trajectory_REQUIRED_BYTES_FOR_ENCODING       234046 
#define asn1SccJointsTrajectory_trajectory_REQUIRED_BITS_FOR_ENCODING        1872366
#define asn1SccJointsTrajectory_trajectory_REQUIRED_BYTES_FOR_ACN_ENCODING   234046 
#define asn1SccJointsTrajectory_trajectory_REQUIRED_BITS_FOR_ACN_ENCODING    1872366
#define asn1SccJointsTrajectory_trajectory_REQUIRED_BYTES_FOR_XER_ENCODING   1326959

void asn1SccJointsTrajectory_trajectory_Initialize(asn1SccJointsTrajectory_trajectory* pVal);
flag asn1SccJointsTrajectory_trajectory_IsConstraintValid(const asn1SccJointsTrajectory_trajectory* val, int* pErrCode);
#ifndef ERR_asn1SccJointsTrajectory_trajectory 
#define ERR_asn1SccJointsTrajectory_trajectory		1034  /*(SIZE(1 .. maxJointsTrajectorySize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccJointState arr[30];
} asn1SccJoints_elements;

#define asn1SccJoints_elements_REQUIRED_BYTES_FOR_ENCODING       1951 
#define asn1SccJoints_elements_REQUIRED_BITS_FOR_ENCODING        15605
#define asn1SccJoints_elements_REQUIRED_BYTES_FOR_ACN_ENCODING   1951 
#define asn1SccJoints_elements_REQUIRED_BITS_FOR_ACN_ENCODING    15605
#define asn1SccJoints_elements_REQUIRED_BYTES_FOR_XER_ENCODING   11075

void asn1SccJoints_elements_Initialize(asn1SccJoints_elements* pVal);
flag asn1SccJoints_elements_IsConstraintValid(const asn1SccJoints_elements* val, int* pErrCode);
#ifndef ERR_asn1SccJoints_elements 
#define ERR_asn1SccJoints_elements		1035  /*(SIZE(0 .. jointsElementsMax))*/
#endif

typedef struct {
    asn1SccJointState min;
    asn1SccJointState max;
} asn1SccJointLimitRange;

#define asn1SccJointLimitRange_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccJointLimitRange_REQUIRED_BITS_FOR_ENCODING        1040
#define asn1SccJointLimitRange_REQUIRED_BYTES_FOR_ACN_ENCODING   130 
#define asn1SccJointLimitRange_REQUIRED_BITS_FOR_ACN_ENCODING    1040
#define asn1SccJointLimitRange_REQUIRED_BYTES_FOR_XER_ENCODING   743

void asn1SccJointLimitRange_Initialize(asn1SccJointLimitRange* pVal);
flag asn1SccJointLimitRange_IsConstraintValid(const asn1SccJointLimitRange* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccJointLimitRange arr[60];
} asn1SccJointLimits_ranges;

#define asn1SccJointLimits_ranges_REQUIRED_BYTES_FOR_ENCODING       7801 
#define asn1SccJointLimits_ranges_REQUIRED_BITS_FOR_ENCODING        62406
#define asn1SccJointLimits_ranges_REQUIRED_BYTES_FOR_ACN_ENCODING   7801 
#define asn1SccJointLimits_ranges_REQUIRED_BITS_FOR_ACN_ENCODING    62406
#define asn1SccJointLimits_ranges_REQUIRED_BYTES_FOR_XER_ENCODING   44621

void asn1SccJointLimits_ranges_Initialize(asn1SccJointLimits_ranges* pVal);
flag asn1SccJointLimits_ranges_IsConstraintValid(const asn1SccJointLimits_ranges* val, int* pErrCode);
#ifndef ERR_asn1SccJointLimits_ranges 
#define ERR_asn1SccJointLimits_ranges		1036  /*(SIZE(1 .. maxJointLimitsSize))*/
#endif

typedef asn1SccSint asn1SccT_Int16;

#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int16 
#define ERR_asn1SccT_Int16		1037  /*(-32768 .. 32767)*/
#endif

typedef asn1SccUint asn1SccT_UInt16;

#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt16 
#define ERR_asn1SccT_UInt16		1038  /*(0 .. 65535)*/
#endif

typedef asn1SccUint asn1SccT_UInt64;

#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        63
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING    63
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt64 
#define ERR_asn1SccT_UInt64		1039  /*(0 .. 9223372036854775807)*/
#endif

typedef asn1SccSint asn1SccT_Int64;

#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ACN_ENCODING    64
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int64 
#define ERR_asn1SccT_Int64		1040  /*(-9223372036854775807 .. 9223372036854775807)*/
#endif

typedef struct {
    asn1SccT_Int64 microseconds;
    asn1SccT_Int32 usecPerSec;
} asn1SccTime;

#define asn1SccTime_REQUIRED_BYTES_FOR_ENCODING       12 
#define asn1SccTime_REQUIRED_BITS_FOR_ENCODING        96
#define asn1SccTime_REQUIRED_BYTES_FOR_ACN_ENCODING   12 
#define asn1SccTime_REQUIRED_BITS_FOR_ACN_ENCODING    96
#define asn1SccTime_REQUIRED_BYTES_FOR_XER_ENCODING   107

void asn1SccTime_Initialize(asn1SccTime* pVal);
flag asn1SccTime_IsConstraintValid(const asn1SccTime* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccTime arr[60];
} asn1SccJointsTrajectory_timetags;

#define asn1SccJointsTrajectory_timetags_REQUIRED_BYTES_FOR_ENCODING       721 
#define asn1SccJointsTrajectory_timetags_REQUIRED_BITS_FOR_ENCODING        5766
#define asn1SccJointsTrajectory_timetags_REQUIRED_BYTES_FOR_ACN_ENCODING   721 
#define asn1SccJointsTrajectory_timetags_REQUIRED_BITS_FOR_ACN_ENCODING    5766
#define asn1SccJointsTrajectory_timetags_REQUIRED_BYTES_FOR_XER_ENCODING   6475

void asn1SccJointsTrajectory_timetags_Initialize(asn1SccJointsTrajectory_timetags* pVal);
flag asn1SccJointsTrajectory_timetags_IsConstraintValid(const asn1SccJointsTrajectory_timetags* val, int* pErrCode);
#ifndef ERR_asn1SccJointsTrajectory_timetags 
#define ERR_asn1SccJointsTrajectory_timetags		1041  /*(SIZE(1 .. maxJointsTrajectorySize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccVector3d acceleration;
    asn1SccMatrix3d cov_acceleration;
} asn1SccRigidBodyAcceleration;

#define asn1SccRigidBodyAcceleration_REQUIRED_BYTES_FOR_ENCODING       170 
#define asn1SccRigidBodyAcceleration_REQUIRED_BITS_FOR_ENCODING        1354
#define asn1SccRigidBodyAcceleration_REQUIRED_BYTES_FOR_ACN_ENCODING   170 
#define asn1SccRigidBodyAcceleration_REQUIRED_BITS_FOR_ACN_ENCODING    1354
#define asn1SccRigidBodyAcceleration_REQUIRED_BYTES_FOR_XER_ENCODING   1161

void asn1SccRigidBodyAcceleration_Initialize(asn1SccRigidBodyAcceleration* pVal);
flag asn1SccRigidBodyAcceleration_IsConstraintValid(const asn1SccRigidBodyAcceleration* val, int* pErrCode);


typedef struct {
    asn1SccTime timestamp;
    asn1SccVector3d force;
    asn1SccVector3d torque;
} asn1SccWrench;

#define asn1SccWrench_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccWrench_REQUIRED_BITS_FOR_ENCODING        724
#define asn1SccWrench_REQUIRED_BYTES_FOR_ACN_ENCODING   91 
#define asn1SccWrench_REQUIRED_BITS_FOR_ACN_ENCODING    724
#define asn1SccWrench_REQUIRED_BYTES_FOR_XER_ENCODING   592

void asn1SccWrench_Initialize(asn1SccWrench* pVal);
flag asn1SccWrench_IsConstraintValid(const asn1SccWrench* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccWrench arr[60];
} asn1SccWrenches_wrenches;

#define asn1SccWrenches_wrenches_REQUIRED_BYTES_FOR_ENCODING       5431 
#define asn1SccWrenches_wrenches_REQUIRED_BITS_FOR_ENCODING        43446
#define asn1SccWrenches_wrenches_REQUIRED_BYTES_FOR_ACN_ENCODING   5431 
#define asn1SccWrenches_wrenches_REQUIRED_BITS_FOR_ACN_ENCODING    43446
#define asn1SccWrenches_wrenches_REQUIRED_BYTES_FOR_XER_ENCODING   35559

void asn1SccWrenches_wrenches_Initialize(asn1SccWrenches_wrenches* pVal);
flag asn1SccWrenches_wrenches_IsConstraintValid(const asn1SccWrenches_wrenches* val, int* pErrCode);
#ifndef ERR_asn1SccWrenches_wrenches 
#define ERR_asn1SccWrenches_wrenches		1042  /*(SIZE(1 .. maxWrenchesSize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccTransformWithCovariance pose;
    asn1SccTwistWithCovariance velocity;
} asn1SccBodyState;

#define asn1SccBodyState_REQUIRED_BYTES_FOR_ENCODING       1124 
#define asn1SccBodyState_REQUIRED_BITS_FOR_ENCODING        8986
#define asn1SccBodyState_REQUIRED_BYTES_FOR_ACN_ENCODING   1124 
#define asn1SccBodyState_REQUIRED_BITS_FOR_ACN_ENCODING    8986
#define asn1SccBodyState_REQUIRED_BYTES_FOR_XER_ENCODING   6629

void asn1SccBodyState_Initialize(asn1SccBodyState* pVal);
flag asn1SccBodyState_IsConstraintValid(const asn1SccBodyState* val, int* pErrCode);


typedef struct {
    asn1SccTime timestamp;
    asn1SccT_Double pascals;
} asn1SccPressure;

#define asn1SccPressure_REQUIRED_BYTES_FOR_ENCODING       25 
#define asn1SccPressure_REQUIRED_BITS_FOR_ENCODING        200
#define asn1SccPressure_REQUIRED_BYTES_FOR_ACN_ENCODING   25 
#define asn1SccPressure_REQUIRED_BITS_FOR_ACN_ENCODING    200
#define asn1SccPressure_REQUIRED_BYTES_FOR_XER_ENCODING   207

void asn1SccPressure_Initialize(asn1SccPressure* pVal);
flag asn1SccPressure_IsConstraintValid(const asn1SccPressure* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[256];
} asn1SccT_String;

#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       258 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        2057
#define asn1SccT_String_REQUIRED_BYTES_FOR_ACN_ENCODING   258 
#define asn1SccT_String_REQUIRED_BITS_FOR_ACN_ENCODING    2057
#define asn1SccT_String_REQUIRED_BYTES_FOR_XER_ENCODING   533

void asn1SccT_String_Initialize(asn1SccT_String* pVal);
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* val, int* pErrCode);
#ifndef ERR_asn1SccT_String 
#define ERR_asn1SccT_String		1043  /*(SIZE(0 .. maxSize-T-String))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_String arr[60];
} asn1SccJointsTrajectory_vector_name;

#define asn1SccJointsTrajectory_vector_name_REQUIRED_BYTES_FOR_ENCODING       15429 
#define asn1SccJointsTrajectory_vector_name_REQUIRED_BITS_FOR_ENCODING        123426
#define asn1SccJointsTrajectory_vector_name_REQUIRED_BYTES_FOR_ACN_ENCODING   15429 
#define asn1SccJointsTrajectory_vector_name_REQUIRED_BITS_FOR_ACN_ENCODING    123426
#define asn1SccJointsTrajectory_vector_name_REQUIRED_BYTES_FOR_XER_ENCODING   32041

void asn1SccJointsTrajectory_vector_name_Initialize(asn1SccJointsTrajectory_vector_name* pVal);
flag asn1SccJointsTrajectory_vector_name_IsConstraintValid(const asn1SccJointsTrajectory_vector_name* val, int* pErrCode);
#ifndef ERR_asn1SccJointsTrajectory_vector_name 
#define ERR_asn1SccJointsTrajectory_vector_name		1044  /*(SIZE(1 .. maxJointsTrajectorySize))*/
#endif

typedef struct {
    asn1SccJointsTrajectory_vector_name vector_name;
    asn1SccJointsTrajectory_timetags timetags;
    asn1SccJointsTrajectory_trajectory trajectory;
} asn1SccJointsTrajectory;

#define asn1SccJointsTrajectory_REQUIRED_BYTES_FOR_ENCODING       250195 
#define asn1SccJointsTrajectory_REQUIRED_BITS_FOR_ENCODING        2001558
#define asn1SccJointsTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING   250195 
#define asn1SccJointsTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING    2001558
#define asn1SccJointsTrajectory_REQUIRED_BYTES_FOR_XER_ENCODING   1365410

void asn1SccJointsTrajectory_Initialize(asn1SccJointsTrajectory* pVal);
flag asn1SccJointsTrajectory_IsConstraintValid(const asn1SccJointsTrajectory* val, int* pErrCode);


typedef struct {
    asn1SccT_String nameString;
} asn1SccInvalidName;

#define asn1SccInvalidName_REQUIRED_BYTES_FOR_ENCODING       258 
#define asn1SccInvalidName_REQUIRED_BITS_FOR_ENCODING        2057
#define asn1SccInvalidName_REQUIRED_BYTES_FOR_ACN_ENCODING   258 
#define asn1SccInvalidName_REQUIRED_BITS_FOR_ACN_ENCODING    2057
#define asn1SccInvalidName_REQUIRED_BYTES_FOR_XER_ENCODING   564

void asn1SccInvalidName_Initialize(asn1SccInvalidName* pVal);
flag asn1SccInvalidName_IsConstraintValid(const asn1SccInvalidName* val, int* pErrCode);


typedef struct {
    asn1SccT_String vector_name;
    asn1SccJointLimits_ranges ranges;
} asn1SccJointLimits;

#define asn1SccJointLimits_REQUIRED_BYTES_FOR_ENCODING       8058 
#define asn1SccJointLimits_REQUIRED_BITS_FOR_ENCODING        64463
#define asn1SccJointLimits_REQUIRED_BYTES_FOR_ACN_ENCODING   8058 
#define asn1SccJointLimits_REQUIRED_BITS_FOR_ACN_ENCODING    64463
#define asn1SccJointLimits_REQUIRED_BYTES_FOR_XER_ENCODING   45163

void asn1SccJointLimits_Initialize(asn1SccJointLimits* pVal);
flag asn1SccJointLimits_IsConstraintValid(const asn1SccJointLimits* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccT_String arr[30];
} asn1SccJoints_names;

#define asn1SccJoints_names_REQUIRED_BYTES_FOR_ENCODING       7715 
#define asn1SccJoints_names_REQUIRED_BITS_FOR_ENCODING        61715
#define asn1SccJoints_names_REQUIRED_BYTES_FOR_ACN_ENCODING   7715 
#define asn1SccJoints_names_REQUIRED_BITS_FOR_ACN_ENCODING    61715
#define asn1SccJoints_names_REQUIRED_BYTES_FOR_XER_ENCODING   16019

void asn1SccJoints_names_Initialize(asn1SccJoints_names* pVal);
flag asn1SccJoints_names_IsConstraintValid(const asn1SccJoints_names* val, int* pErrCode);
#ifndef ERR_asn1SccJoints_names 
#define ERR_asn1SccJoints_names		1045  /*(SIZE(0 .. jointsElementsMax))*/
#endif

typedef struct {
    asn1SccTime timestamp;
    asn1SccJoints_names names;
    asn1SccJoints_elements elements;
} asn1SccJoints;

#define asn1SccJoints_REQUIRED_BYTES_FOR_ENCODING       9677 
#define asn1SccJoints_REQUIRED_BITS_FOR_ENCODING        77416
#define asn1SccJoints_REQUIRED_BYTES_FOR_ACN_ENCODING   9677 
#define asn1SccJoints_REQUIRED_BITS_FOR_ACN_ENCODING    77416
#define asn1SccJoints_REQUIRED_BYTES_FOR_XER_ENCODING   27200

void asn1SccJoints_Initialize(asn1SccJoints* pVal);
flag asn1SccJoints_IsConstraintValid(const asn1SccJoints* val, int* pErrCode);


typedef struct {
    asn1SccT_String error_name;
    asn1SccT_Double min;
    asn1SccT_Double max;
    asn1SccT_Double value;
} asn1SccOutOfBounds;

#define asn1SccOutOfBounds_REQUIRED_BYTES_FOR_ENCODING       297 
#define asn1SccOutOfBounds_REQUIRED_BITS_FOR_ENCODING        2369
#define asn1SccOutOfBounds_REQUIRED_BYTES_FOR_ACN_ENCODING   297 
#define asn1SccOutOfBounds_REQUIRED_BITS_FOR_ACN_ENCODING    2369
#define asn1SccOutOfBounds_REQUIRED_BYTES_FOR_XER_ENCODING   751

void asn1SccOutOfBounds_Initialize(asn1SccOutOfBounds* pVal);
flag asn1SccOutOfBounds_IsConstraintValid(const asn1SccOutOfBounds* val, int* pErrCode);


typedef struct {
    asn1SccTime timestamp;
    asn1SccT_String sourceFrame;
    asn1SccT_String targetFrame;
    asn1SccPosition pos;
    asn1SccMatrix3d cov_position;
    asn1SccOrientation orient;
    asn1SccMatrix3d cov_orientation;
    asn1SccVector3d velocity;
    asn1SccMatrix3d cov_velocity;
    asn1SccVector3d angular_velocity;
    asn1SccMatrix3d cov_angular_velocity;
} asn1SccRigidBodyState;

#define asn1SccRigidBodyState_REQUIRED_BYTES_FOR_ENCODING       1169 
#define asn1SccRigidBodyState_REQUIRED_BITS_FOR_ENCODING        9346
#define asn1SccRigidBodyState_REQUIRED_BYTES_FOR_ACN_ENCODING   1169 
#define asn1SccRigidBodyState_REQUIRED_BITS_FOR_ACN_ENCODING    9346
#define asn1SccRigidBodyState_REQUIRED_BYTES_FOR_XER_ENCODING   5255

void asn1SccRigidBodyState_Initialize(asn1SccRigidBodyState* pVal);
flag asn1SccRigidBodyState_IsConstraintValid(const asn1SccRigidBodyState* val, int* pErrCode);


typedef struct {
    asn1SccT_String vector_name;
    asn1SccTime timestamp;
    asn1SccWrenches_wrenches wrenches;
} asn1SccWrenches;

#define asn1SccWrenches_REQUIRED_BYTES_FOR_ENCODING       5700 
#define asn1SccWrenches_REQUIRED_BITS_FOR_ENCODING        45599
#define asn1SccWrenches_REQUIRED_BYTES_FOR_ACN_ENCODING   5700 
#define asn1SccWrenches_REQUIRED_BITS_FOR_ACN_ENCODING    45599
#define asn1SccWrenches_REQUIRED_BYTES_FOR_XER_ENCODING   36218

void asn1SccWrenches_Initialize(asn1SccWrenches* pVal);
flag asn1SccWrenches_IsConstraintValid(const asn1SccWrenches* val, int* pErrCode);


extern const asn1SccT_UInt32 maxTrajectoryPoints;
extern const asn1SccT_UInt32 maxJointTrajectorySize;
extern const asn1SccT_UInt32 maxJointsTrajectorySize;
extern const asn1SccT_UInt32 maxSize_T_String;
extern const asn1SccT_UInt32 maxJointLimitsSize;
extern const asn1SccT_UInt32 jointsNameLength;
extern const asn1SccT_UInt32 jointsElementsMax;
extern const asn1SccT_UInt32 maxWrenchesSize; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccInvalidTimeStep_Encode(const asn1SccInvalidTimeStep* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccInvalidTimeStep_Decode(asn1SccInvalidTimeStep* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccResolution_Encode(const asn1SccResolution* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccResolution_Decode(asn1SccResolution* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Double_Encode(const asn1SccT_Double* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTemperature_Encode(const asn1SccTemperature* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTemperature_Decode(asn1SccTemperature* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector6d_Encode(const asn1SccVector6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector6d_Decode(asn1SccVector6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector3d_Encode(const asn1SccVector3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector3d_Decode(asn1SccVector3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition_Encode(const asn1SccPosition* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition_Decode(asn1SccPosition* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccWaypoint_Encode(const asn1SccWaypoint* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccWaypoint_Decode(asn1SccWaypoint* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint_Encode(const asn1SccPoint* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint_Decode(asn1SccPoint* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTrajectory_points_Encode(const asn1SccTrajectory_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTrajectory_points_Decode(asn1SccTrajectory_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTrajectory_Encode(const asn1SccTrajectory* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTrajectory_Decode(asn1SccTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccQuaterniond_Encode(const asn1SccQuaterniond* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccQuaterniond_Decode(asn1SccQuaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOrientation_Encode(const asn1SccOrientation* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOrientation_Decode(asn1SccOrientation* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose_Encode(const asn1SccPose* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose_Decode(asn1SccPose* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVectorXd_Encode(const asn1SccVectorXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVectorXd_Decode(asn1SccVectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector2d_Encode(const asn1SccVector2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector2d_Decode(asn1SccVector2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition2D_Encode(const asn1SccPosition2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition2D_Decode(asn1SccPosition2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose2D_Encode(const asn1SccPose2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose2D_Decode(asn1SccPose2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector4d_Encode(const asn1SccVector4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector4d_Decode(asn1SccVector4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngleAxisd_Encode(const asn1SccAngleAxisd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngleAxisd_Decode(asn1SccAngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_elm_Encode(const asn1SccTransform3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_elm_Decode(asn1SccTransform3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_Encode(const asn1SccTransform3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_Decode(asn1SccTransform3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_elm_Encode(const asn1SccMatrix4d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_elm_Decode(asn1SccMatrix4d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_Encode(const asn1SccMatrix4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_Decode(asn1SccMatrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_elm_Encode(const asn1SccMatrix2d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_elm_Decode(asn1SccMatrix2d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_Encode(const asn1SccMatrix2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_Decode(asn1SccMatrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_elm_Encode(const asn1SccIsometry3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_elm_Decode(asn1SccIsometry3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_Encode(const asn1SccIsometry3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_Decode(asn1SccIsometry3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_elm_Encode(const asn1SccMatrixXd_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_elm_Decode(asn1SccMatrixXd_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_Encode(const asn1SccMatrixXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_Decode(asn1SccMatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_elm_Encode(const asn1SccMatrix3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_elm_Decode(asn1SccMatrix3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_Encode(const asn1SccMatrix3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_Decode(asn1SccMatrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_elm_Encode(const asn1SccMatrix6d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_elm_Decode(asn1SccMatrix6d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_Encode(const asn1SccMatrix6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_Decode(asn1SccMatrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCovariance_Encode(const asn1SccCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCovariance_Decode(asn1SccCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Encode(const asn1SccTransformWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Decode(asn1SccTransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_Encode(const asn1SccTwistWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_Decode(asn1SccTwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_elm_Encode(const asn1SccAffine3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_elm_Decode(asn1SccAffine3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_Encode(const asn1SccAffine3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_Decode(asn1SccAffine3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoseUpdateThreshold_Encode(const asn1SccPoseUpdateThreshold* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoseUpdateThreshold_Decode(asn1SccPoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngle_Encode(const asn1SccAngle* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngle_Decode(asn1SccAngle* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngleSegment_Encode(const asn1SccAngleSegment* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngleSegment_Decode(asn1SccAngleSegment* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMotion2D_Encode(const asn1SccMotion2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMotion2D_Decode(asn1SccMotion2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Float_Encode(const asn1SccT_Float* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointState_Encode(const asn1SccJointState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointState_Decode(asn1SccJointState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointTrajectory_Encode(const asn1SccJointTrajectory* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointTrajectory_Decode(asn1SccJointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointsTrajectory_trajectory_Encode(const asn1SccJointsTrajectory_trajectory* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointsTrajectory_trajectory_Decode(asn1SccJointsTrajectory_trajectory* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_elements_Encode(const asn1SccJoints_elements* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_elements_Decode(asn1SccJoints_elements* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointLimitRange_Encode(const asn1SccJointLimitRange* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointLimitRange_Decode(asn1SccJointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointLimits_ranges_Encode(const asn1SccJointLimits_ranges* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointLimits_ranges_Decode(asn1SccJointLimits_ranges* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int16_Encode(const asn1SccT_Int16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int64_Encode(const asn1SccT_Int64* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTime_Encode(const asn1SccTime* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTime_Decode(asn1SccTime* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointsTrajectory_timetags_Encode(const asn1SccJointsTrajectory_timetags* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointsTrajectory_timetags_Decode(asn1SccJointsTrajectory_timetags* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccRigidBodyAcceleration_Encode(const asn1SccRigidBodyAcceleration* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccRigidBodyAcceleration_Decode(asn1SccRigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccWrench_Encode(const asn1SccWrench* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccWrench_Decode(asn1SccWrench* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccWrenches_wrenches_Encode(const asn1SccWrenches_wrenches* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccWrenches_wrenches_Decode(asn1SccWrenches_wrenches* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccBodyState_Encode(const asn1SccBodyState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccBodyState_Decode(asn1SccBodyState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPressure_Encode(const asn1SccPressure* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPressure_Decode(asn1SccPressure* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_String_Encode(const asn1SccT_String* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointsTrajectory_vector_name_Encode(const asn1SccJointsTrajectory_vector_name* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointsTrajectory_vector_name_Decode(asn1SccJointsTrajectory_vector_name* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointsTrajectory_Encode(const asn1SccJointsTrajectory* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointsTrajectory_Decode(asn1SccJointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccInvalidName_Encode(const asn1SccInvalidName* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccInvalidName_Decode(asn1SccInvalidName* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointLimits_Encode(const asn1SccJointLimits* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointLimits_Decode(asn1SccJointLimits* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_names_Encode(const asn1SccJoints_names* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_names_Decode(asn1SccJoints_names* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJoints_Encode(const asn1SccJoints* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJoints_Decode(asn1SccJoints* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOutOfBounds_Encode(const asn1SccOutOfBounds* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOutOfBounds_Decode(asn1SccOutOfBounds* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccRigidBodyState_Encode(const asn1SccRigidBodyState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccRigidBodyState_Decode(asn1SccRigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccWrenches_Encode(const asn1SccWrenches* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccWrenches_Decode(asn1SccWrenches* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccseconds	asn1Sccseconds
#define ENUM_asn1Sccmilliseconds	asn1Sccmilliseconds
#define ENUM_asn1Sccmicroseconds	asn1Sccmicroseconds

#endif

#endif
